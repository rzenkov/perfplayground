/*
 * This file is generated by jOOQ.
 */
package ru.rzen.perflayground.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import ru.rzen.perflayground.jooq.tables.Messages;
import ru.rzen.perflayground.jooq.tables.Position;
import ru.rzen.perflayground.jooq.tables.Subdivision;
import ru.rzen.perflayground.jooq.tables.UserToPosition;
import ru.rzen.perflayground.jooq.tables.Users;
import ru.rzen.perflayground.jooq.tables.records.MessagesRecord;
import ru.rzen.perflayground.jooq.tables.records.PositionRecord;
import ru.rzen.perflayground.jooq.tables.records.SubdivisionRecord;
import ru.rzen.perflayground.jooq.tables.records.UserToPositionRecord;
import ru.rzen.perflayground.jooq.tables.records.UsersRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<MessagesRecord> MESSAGES_PKEY = Internal.createUniqueKey(Messages.MESSAGES, DSL.name("messages_pkey"), new TableField[] { Messages.MESSAGES.ID }, true);
    public static final UniqueKey<PositionRecord> POSITION_PKEY = Internal.createUniqueKey(Position.POSITION, DSL.name("position_pkey"), new TableField[] { Position.POSITION.ID }, true);
    public static final UniqueKey<SubdivisionRecord> SUBDIVISION_PKEY = Internal.createUniqueKey(Subdivision.SUBDIVISION, DSL.name("subdivision_pkey"), new TableField[] { Subdivision.SUBDIVISION.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<UserToPositionRecord, PositionRecord> USER_TO_POSITION__FK_USERTOPOSITION_ON_POSITION = Internal.createForeignKey(UserToPosition.USER_TO_POSITION, DSL.name("fk_usertoposition_on_position"), new TableField[] { UserToPosition.USER_TO_POSITION.POSITION_ID }, Keys.POSITION_PKEY, new TableField[] { Position.POSITION.ID }, true);
    public static final ForeignKey<UserToPositionRecord, UsersRecord> USER_TO_POSITION__FK_USERTOPOSITION_ON_USERS = Internal.createForeignKey(UserToPosition.USER_TO_POSITION, DSL.name("fk_usertoposition_on_users"), new TableField[] { UserToPosition.USER_TO_POSITION.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<UsersRecord, SubdivisionRecord> USERS__FK_USERS_ON_SUBDIVISION = Internal.createForeignKey(Users.USERS, DSL.name("fk_users_on_subdivision"), new TableField[] { Users.USERS.SUBDIVISION_ID }, Keys.SUBDIVISION_PKEY, new TableField[] { Subdivision.SUBDIVISION.ID }, true);
}
