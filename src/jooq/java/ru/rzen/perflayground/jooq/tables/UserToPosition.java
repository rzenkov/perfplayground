/*
 * This file is generated by jOOQ.
 */
package ru.rzen.perflayground.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.rzen.perflayground.jooq.Keys;
import ru.rzen.perflayground.jooq.Public;
import ru.rzen.perflayground.jooq.tables.Position.PositionPath;
import ru.rzen.perflayground.jooq.tables.Users.UsersPath;
import ru.rzen.perflayground.jooq.tables.records.UserToPositionRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserToPosition extends TableImpl<UserToPositionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_to_position</code>
     */
    public static final UserToPosition USER_TO_POSITION = new UserToPosition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserToPositionRecord> getRecordType() {
        return UserToPositionRecord.class;
    }

    /**
     * The column <code>public.user_to_position.user_id</code>.
     */
    public final TableField<UserToPositionRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.user_to_position.position_id</code>.
     */
    public final TableField<UserToPositionRecord, UUID> POSITION_ID = createField(DSL.name("position_id"), SQLDataType.UUID, this, "");

    private UserToPosition(Name alias, Table<UserToPositionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserToPosition(Name alias, Table<UserToPositionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.user_to_position</code> table reference
     */
    public UserToPosition(String alias) {
        this(DSL.name(alias), USER_TO_POSITION);
    }

    /**
     * Create an aliased <code>public.user_to_position</code> table reference
     */
    public UserToPosition(Name alias) {
        this(alias, USER_TO_POSITION);
    }

    /**
     * Create a <code>public.user_to_position</code> table reference
     */
    public UserToPosition() {
        this(DSL.name("user_to_position"), null);
    }

    public <O extends Record> UserToPosition(Table<O> path, ForeignKey<O, UserToPositionRecord> childPath, InverseForeignKey<O, UserToPositionRecord> parentPath) {
        super(path, childPath, parentPath, USER_TO_POSITION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserToPositionPath extends UserToPosition implements Path<UserToPositionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserToPositionPath(Table<O> path, ForeignKey<O, UserToPositionRecord> childPath, InverseForeignKey<O, UserToPositionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserToPositionPath(Name alias, Table<UserToPositionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserToPositionPath as(String alias) {
            return new UserToPositionPath(DSL.name(alias), this);
        }

        @Override
        public UserToPositionPath as(Name alias) {
            return new UserToPositionPath(alias, this);
        }

        @Override
        public UserToPositionPath as(Table<?> alias) {
            return new UserToPositionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<UserToPositionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_TO_POSITION__FK_USERTOPOSITION_ON_POSITION, Keys.USER_TO_POSITION__FK_USERTOPOSITION_ON_USERS);
    }

    private transient PositionPath _position;

    /**
     * Get the implicit join path to the <code>public.position</code> table.
     */
    public PositionPath position() {
        if (_position == null)
            _position = new PositionPath(this, Keys.USER_TO_POSITION__FK_USERTOPOSITION_ON_POSITION, null);

        return _position;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.USER_TO_POSITION__FK_USERTOPOSITION_ON_USERS, null);

        return _users;
    }

    @Override
    public UserToPosition as(String alias) {
        return new UserToPosition(DSL.name(alias), this);
    }

    @Override
    public UserToPosition as(Name alias) {
        return new UserToPosition(alias, this);
    }

    @Override
    public UserToPosition as(Table<?> alias) {
        return new UserToPosition(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserToPosition rename(String name) {
        return new UserToPosition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserToPosition rename(Name name) {
        return new UserToPosition(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserToPosition rename(Table<?> name) {
        return new UserToPosition(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToPosition where(Condition condition) {
        return new UserToPosition(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToPosition where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToPosition where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToPosition where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserToPosition where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserToPosition where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserToPosition where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserToPosition where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToPosition whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToPosition whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
