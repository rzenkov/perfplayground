/*
 * This file is generated by jOOQ.
 */
package ru.rzen.perflayground.jooq.tables;


import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.rzen.perflayground.jooq.Keys;
import ru.rzen.perflayground.jooq.Public;
import ru.rzen.perflayground.jooq.tables.UserToPosition.UserToPositionPath;
import ru.rzen.perflayground.jooq.tables.records.PositionRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Position extends TableImpl<PositionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.position</code>
     */
    public static final Position POSITION = new Position();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PositionRecord> getRecordType() {
        return PositionRecord.class;
    }

    /**
     * The column <code>public.position.id</code>.
     */
    public final TableField<PositionRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.position.name</code>.
     */
    public final TableField<PositionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.position.type</code>.
     */
    public final TableField<PositionRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(25), this, "");

    private Position(Name alias, Table<PositionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Position(Name alias, Table<PositionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.position</code> table reference
     */
    public Position(String alias) {
        this(DSL.name(alias), POSITION);
    }

    /**
     * Create an aliased <code>public.position</code> table reference
     */
    public Position(Name alias) {
        this(alias, POSITION);
    }

    /**
     * Create a <code>public.position</code> table reference
     */
    public Position() {
        this(DSL.name("position"), null);
    }

    public <O extends Record> Position(Table<O> path, ForeignKey<O, PositionRecord> childPath, InverseForeignKey<O, PositionRecord> parentPath) {
        super(path, childPath, parentPath, POSITION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PositionPath extends Position implements Path<PositionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PositionPath(Table<O> path, ForeignKey<O, PositionRecord> childPath, InverseForeignKey<O, PositionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PositionPath(Name alias, Table<PositionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PositionPath as(String alias) {
            return new PositionPath(DSL.name(alias), this);
        }

        @Override
        public PositionPath as(Name alias) {
            return new PositionPath(alias, this);
        }

        @Override
        public PositionPath as(Table<?> alias) {
            return new PositionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PositionRecord> getPrimaryKey() {
        return Keys.POSITION_PKEY;
    }

    private transient UserToPositionPath _userToPosition;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_to_position</code> table
     */
    public UserToPositionPath userToPosition() {
        if (_userToPosition == null)
            _userToPosition = new UserToPositionPath(this, null, Keys.USER_TO_POSITION__FK_USERTOPOSITION_ON_POSITION.getInverseKey());

        return _userToPosition;
    }

    @Override
    public Position as(String alias) {
        return new Position(DSL.name(alias), this);
    }

    @Override
    public Position as(Name alias) {
        return new Position(alias, this);
    }

    @Override
    public Position as(Table<?> alias) {
        return new Position(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Position rename(String name) {
        return new Position(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Position rename(Name name) {
        return new Position(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Position rename(Table<?> name) {
        return new Position(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Position where(Condition condition) {
        return new Position(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Position where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Position where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Position where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Position where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Position where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Position where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Position where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Position whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Position whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
