plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'io.freefair.lombok' version '8.12.1'
	id 'nu.studer.jooq' version '10.1'
}

group = 'ru.rzen'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation libs.springdoc.openapi

	runtimeOnly 'org.postgresql:postgresql'
	jooqGenerator 'org.postgresql:postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

jooq {
	version = dependencyManagement.importedProperties['jooq.version']

	configurations {
		main {
			generateSchemaSourceOnCompilation = false

			generationTool {
				jdbc {
					driver = 'org.postgresql.Driver'
					url = 'jdbc:postgresql://localhost:5432/jooqplayground'
					user = 'jooqplayground'
					password = 'jooqplayground'
					properties {
						property {
							key = 'ssl'
							value = 'false'
						}
					}
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.postgres.PostgresDatabase'
						inputSchema = 'public'
					}
					generate {
						deprecated = false
						records = true
						immutablePojos = true
						fluentSetters = true
					}
					target {
						packageName = 'ru.rzen.jooqplayground.jooq'
						directory = 'src/jooq/java'
					}
					strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
				}
			}
		}
	}
}
